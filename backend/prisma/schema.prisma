generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id            Int          @id @default(autoincrement())
  role_id       Int
  email         String       @unique
  name          String
  password      String
  refresh_token String?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  created_by_id Int?
  created_by    SuperAdmin?  @relation("CreatedBy", fields: [created_by_id], references: [id])
  created       SuperAdmin[] @relation("CreatedBy")

  role SuperAdminRole @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([name])
  @@index([role_id])
  @@map("super_admins")
}

model SuperAdminRole {
  id          Int                        @id @default(autoincrement())
  name        String                     @unique
  permissions SuperAdminRolePermission[]
  users       SuperAdmin[]

  @@map("super_admin_roles")
}

model SuperAdminPermission {
  id             Int                        @id @default(autoincrement())
  action         String                     @unique
  RolePermission SuperAdminRolePermission[]

  @@map("super_admin_permissions")
}

model SuperAdminRolePermission {
  role_id       Int
  permission_id Int
  role          SuperAdminRole       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    SuperAdminPermission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("super_admin_role_permissions")
}

model Consumer {
  id                Int      @id @default(autoincrement())
  company_name      String
  business_category String?
  secondary_email   String?
  email             String
  phone             String?
  address           String?
  subdomain         String   @unique
  plan_id           Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  plan         Plan             @relation(fields: [plan_id], references: [id], onDelete: Restrict)
  users        User[]
  roles        Role[]
  billing_logs BillingHistory[]

  @@index([email])
  @@index([company_name])
  @@index([phone])
  @@index([subdomain])
  @@index([plan_id])
  @@map("consumers")
}

model Plan {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  price       Float
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  consumers   Consumer[]
  permissions PlanPermission[]

  @@map("plans")
}

model PlanPermission {
  plan_id       Int
  permission_id Int
  plan          Plan       @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([plan_id, permission_id])
  @@map("plan_permissions")
}

model BillingHistory {
  id           Int      @id @default(autoincrement())
  consumer_id  Int
  amount       Float
  reference    String
  billing_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  consumer Consumer @relation(fields: [consumer_id], references: [id], onDelete: Cascade)

  @@unique([consumer_id, billing_date])
  @@index([consumer_id])
  @@index([billing_date])
  @@map("billing_histories")
}

model User {
  id            Int      @id @default(autoincrement())
  consumer_id   Int
  role_id       Int
  email         String   @unique
  name          String
  password      String
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  consumer Consumer @relation(fields: [consumer_id], references: [id], onDelete: Cascade)
  role     Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@index([consumer_id])
  @@map("users")
}

model Permission {
  id             Int              @id @default(autoincrement())
  action         String           @unique
  RolePermission RolePermission[]
  PlanPermission PlanPermission[]

  @@map("permissions")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  consumer_id Int
  consumer    Consumer         @relation(fields: [consumer_id], references: [id], onDelete: Cascade)
  permissions RolePermission[]
  users       User[]

  @@unique([consumer_id, name])
  @@index([consumer_id])
  @@map("roles")
}

model RolePermission {
  role_id       Int
  permission_id Int
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("role_permissions")
}
