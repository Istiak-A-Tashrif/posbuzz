generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Consumer {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String?
  address    String?
  subdomain  String   @unique
  plan_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  plan         Plan             @relation(fields: [plan_id], references: [id], onDelete: Restrict)
  users        User[]
  roles        Role[]
  billing_logs BillingHistory[]
}

model Plan {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  price       Float
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  consumers   Consumer[]
  permissions PlanPermission[]
}

model PlanPermission {
  plan_id       Int
  permission_id Int
  plan          Plan       @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([plan_id, permission_id])
}

model BillingHistory {
  id            Int      @id @default(autoincrement())
  consumer_id   Int
  amount        Float
  reference     String
  billing_month String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  consumer Consumer @relation(fields: [consumer_id], references: [id], onDelete: Cascade)

  @@unique([consumer_id, billing_month])
  @@index([consumer_id])
  @@index([billing_month])
}

model User {
  id            Int      @id @default(autoincrement())
  consumer_id   Int
  role_id       Int
  email         String   @unique
  name          String
  password      String
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  consumer Consumer @relation(fields: [consumer_id], references: [id], onDelete: Cascade)
  role     Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@index([consumer_id])
}

model Permission {
  id             Int              @id @default(autoincrement())
  action         String           @unique
  RolePermission RolePermission[]
  PlanPermission PlanPermission[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  consumer_id Int
  consumer    Consumer         @relation(fields: [consumer_id], references: [id], onDelete: Cascade)
  permissions RolePermission[]
  users       User[]

  @@index([consumer_id])
}

model RolePermission {
  role_id       Int
  permission_id Int
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}
